"""
To run tests: python run-tests.py
"""

>>> import sys, os
>>> sys.path.insert(0, os.path.join('.', '..', '..'))
>>> from qtodotxt.lib import filters,tasklib
>>> from qtodotxt.lib.filters import SimpleTextFilter, FutureFilter

>>> def match(filterText, taskText):
...     task = tasklib.Task(taskText)
...     filter = SimpleTextFilter(filterText)
...     resultTasks = tasklib.filterTasks([filter],[task])
...     return len(resultTasks) > 0
... 

========================================
1. SimpleTextFilter
========================================

>>> match("Som", 'do Something')
True

========================================
1. SimpleTextFilter with parentheses
========================================

>>> match("(A", '(A) do Something')
True
>>> match("(A)", '(A) do Something')
True

========================================
2. SimpleTextFilter empty filter string
========================================

>>> match("", '(A) do Something')
True

========================================
3. SimpleTextFilter case insensitive
========================================

>>> match("som", '(A) do Something')
True

========================================
4. SimpleTextFilter OR condition
========================================

>>> match("Som | zzz", '(A) do Something')
True
>>> match("yyy | zzz", '(A) do Something')
False

========================================
5. SimpleTextFilter AND condition (case insensitive)
========================================

>>> match("do some", '(A) do Something')
True
>>> match("do, some", '(A) do Something')
True
>>> match("zzz some", '(A) do Something')
False

========================================
6. SimpleTextFilter AND and NOT conditions 
========================================

>>> match("!zzz some", '(A) do Something')
True
>>> match("~zzz some", '(A) do Something')
True
>>> match("~zzz !some", '(A) do Something')
False

========================================
7. SimpleTextFilter AND, OR, and NOT conditions 
========================================

>>> match("zzz | some ~yyy", '(A) do Something')
True
>>> match("zzz | !some yyy", '(A) do Something')
False

========================================
8. SimpleTextFilter NOT condition
========================================

>>> match("~som", '(A) do Something')
False
>>> match("!som", '(A) do Something')
False
>>> match("!zzz", '(A) do Something')
True

==============================================
9. SimpleTextFilter on projects and categories
==============================================

>>> match("some +proj", 'do Something +project @context')
True
>>> match("xxx | @context", 'do Something +project @context')
True
>>> match("do !+project", 'do Something +project @context')
False

==============================================
9. SimpleTextFilter test for user doc examples
==============================================

>>> match("work job1 | @home", 'work')
False
>>> match("work job1 | @home", 'job1')
False
>>> match("work job1 | @home", '@home')
True

>>> match("norweigan blue ~dead | !parrot", 'norweigan')
True
>>> match("norweigan blue ~dead | !parrot", 'blue')
True
>>> match("norweigan blue ~dead | !parrot", 'dead')
True
>>> match("norweigan blue ~dead | !parrot", 'parrot')
False

>>> match("cleese", 'johncleese')
False

>>> match(r"johncleese\b", 'johncleese')
True
>>> match(r"john\b", 'johncleese')
False

>>> match(r"2014-\d\d-07", '2014-03-07')
True
>>> match(r"2014-\d\d-07", '2014-ja-07')
False

>>> match("(B)", '(B) nail its feet to the perch')
True

==============================================
10. SimpleTextFilter - weird search strings
==============================================

>>> match('joe\\', r'joe\jack')
True

==============================================
==============================================
